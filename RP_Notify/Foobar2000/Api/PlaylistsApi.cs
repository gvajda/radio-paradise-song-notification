/* 
 * Player API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Foobar2000.RESTClient.Client;
using Foobar2000.RESTClient.Model;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace Foobar2000.RESTClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlaylistsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Position to add playlist at. By default playlist is added to the last position (optional)</param>
        /// <param name="title">New playlist title (optional)</param>
        /// <returns></returns>
        void AddPlaylist (decimal? index = null, string title = null);

        /// <summary>
        /// Add playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Position to add playlist at. By default playlist is added to the last position (optional)</param>
        /// <param name="title">New playlist title (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddPlaylistWithHttpInfo (decimal? index = null, string title = null);
        /// <summary>
        /// Add playlist items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="content">Items to add</param>
        /// <param name="index">Position to add items at (optional)</param>
        /// <param name="async">Process request asynchronously (optional)</param>
        /// <returns></returns>
        void AddPlaylistItems (string playlistId, AddItemsRequest content, decimal? index = null, bool? async = null);

        /// <summary>
        /// Add playlist items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="content">Items to add</param>
        /// <param name="index">Position to add items at (optional)</param>
        /// <param name="async">Process request asynchronously (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddPlaylistItemsWithHttpInfo (string playlistId, AddItemsRequest content, decimal? index = null, bool? async = null);
        /// <summary>
        /// Clear playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <returns></returns>
        void ClearPlaylist (string playlistId);

        /// <summary>
        /// Clear playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ClearPlaylistWithHttpInfo (string playlistId);
        /// <summary>
        /// Copy playlist items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="content">Indexes of items to copy</param>
        /// <param name="targetIndex">Position to copy items to. Items are copied to the end of the playlist by default (optional)</param>
        /// <returns></returns>
        void CopyPlaylistItems (string playlistId, ItemIndexesRequest content, decimal? targetIndex = null);

        /// <summary>
        /// Copy playlist items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="content">Indexes of items to copy</param>
        /// <param name="targetIndex">Position to copy items to. Items are copied to the end of the playlist by default (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CopyPlaylistItemsWithHttpInfo (string playlistId, ItemIndexesRequest content, decimal? targetIndex = null);
        /// <summary>
        /// Copy playlist items between playlists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">Source playlist id or index</param>
        /// <param name="targetId">Target playlist id or index</param>
        /// <param name="content">Indexes of items to copy</param>
        /// <param name="targetIndex">Playlist position to copy items to. Items are copied to the end of the playlist by default (optional)</param>
        /// <returns></returns>
        void CopyPlaylistItemsEx (string sourceId, string targetId, ItemIndexesRequest content, decimal? targetIndex = null);

        /// <summary>
        /// Copy playlist items between playlists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">Source playlist id or index</param>
        /// <param name="targetId">Target playlist id or index</param>
        /// <param name="content">Indexes of items to copy</param>
        /// <param name="targetIndex">Playlist position to copy items to. Items are copied to the end of the playlist by default (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CopyPlaylistItemsExWithHttpInfo (string sourceId, string targetId, ItemIndexesRequest content, decimal? targetIndex = null);
        /// <summary>
        /// Get playlist items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="range">Playlist item range in form offset:count</param>
        /// <param name="columns">Item columns to return</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 GetPlaylistItems (string playlistId, string range, List<string> columns);

        /// <summary>
        /// Get playlist items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="range">Playlist item range in form offset:count</param>
        /// <param name="columns">Item columns to return</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> GetPlaylistItemsWithHttpInfo (string playlistId, string range, List<string> columns);
        /// <summary>
        /// Get playlists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 GetPlaylists ();

        /// <summary>
        /// Get playlists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> GetPlaylistsWithHttpInfo ();
        /// <summary>
        /// Move playlist to new position
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="index">Target position. Use negative value to move to the last position</param>
        /// <returns></returns>
        void MovePlaylist (string playlistId, string index);

        /// <summary>
        /// Move playlist to new position
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="index">Target position. Use negative value to move to the last position</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MovePlaylistWithHttpInfo (string playlistId, string index);
        /// <summary>
        /// Move playlist items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="content">Indexes of items to move</param>
        /// <param name="targetIndex">Position to move items to. Items are moved to the end of the playlist by default (optional)</param>
        /// <returns></returns>
        void MovePlaylistItems (string playlistId, ItemIndexesRequest content, decimal? targetIndex = null);

        /// <summary>
        /// Move playlist items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="content">Indexes of items to move</param>
        /// <param name="targetIndex">Position to move items to. Items are moved to the end of the playlist by default (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MovePlaylistItemsWithHttpInfo (string playlistId, ItemIndexesRequest content, decimal? targetIndex = null);
        /// <summary>
        /// Move playlist items between playlists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">Source playlist id or index</param>
        /// <param name="targetId">Target playlist id or index</param>
        /// <param name="content">Indexes of items to move</param>
        /// <param name="targetIndex">Position to move items to. Items are moved to the end of the playlist by default (optional)</param>
        /// <returns></returns>
        void MovePlaylistItemsEx (string sourceId, string targetId, ItemIndexesRequest content, decimal? targetIndex = null);

        /// <summary>
        /// Move playlist items between playlists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">Source playlist id or index</param>
        /// <param name="targetId">Target playlist id or index</param>
        /// <param name="content">Indexes of items to move</param>
        /// <param name="targetIndex">Position to move items to. Items are moved to the end of the playlist by default (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MovePlaylistItemsExWithHttpInfo (string sourceId, string targetId, ItemIndexesRequest content, decimal? targetIndex = null);
        /// <summary>
        /// Remove playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <returns></returns>
        void RemovePlaylist (string playlistId);

        /// <summary>
        /// Remove playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemovePlaylistWithHttpInfo (string playlistId);
        /// <summary>
        /// Remove playlist items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="content">Indexes of items to remove</param>
        /// <returns></returns>
        void RemovePlaylistItems (string playlistId, ItemIndexesRequest content);

        /// <summary>
        /// Remove playlist items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="content">Indexes of items to remove</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemovePlaylistItemsWithHttpInfo (string playlistId, ItemIndexesRequest content);
        /// <summary>
        /// Sort playlist items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="by">Expression to sort by (e.g. %title%) (optional)</param>
        /// <param name="desc">Sort in descending order (optional)</param>
        /// <param name="random">Sort randomly (optional)</param>
        /// <returns></returns>
        void SortPlaylistItems (string playlistId, string by = null, bool? desc = null, bool? random = null);

        /// <summary>
        /// Sort playlist items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="by">Expression to sort by (e.g. %title%) (optional)</param>
        /// <param name="desc">Sort in descending order (optional)</param>
        /// <param name="random">Sort randomly (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SortPlaylistItemsWithHttpInfo (string playlistId, string by = null, bool? desc = null, bool? random = null);
        /// <summary>
        /// Update playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="title">New playlist title (optional)</param>
        /// <returns></returns>
        void UpdatePlaylist (string playlistId, string title = null);

        /// <summary>
        /// Update playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="title">New playlist title (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdatePlaylistWithHttpInfo (string playlistId, string title = null);
        /// <summary>
        /// Update playlist collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="current">Playlist id or index to make current (optional)</param>
        /// <returns></returns>
        void UpdatePlaylists (string current = null);

        /// <summary>
        /// Update playlist collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="current">Playlist id or index to make current (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdatePlaylistsWithHttpInfo (string current = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Position to add playlist at. By default playlist is added to the last position (optional)</param>
        /// <param name="title">New playlist title (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddPlaylistAsync (decimal? index = null, string title = null);

        /// <summary>
        /// Add playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Position to add playlist at. By default playlist is added to the last position (optional)</param>
        /// <param name="title">New playlist title (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddPlaylistAsyncWithHttpInfo (decimal? index = null, string title = null);
        /// <summary>
        /// Add playlist items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="content">Items to add</param>
        /// <param name="index">Position to add items at (optional)</param>
        /// <param name="async">Process request asynchronously (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddPlaylistItemsAsync (string playlistId, AddItemsRequest content, decimal? index = null, bool? async = null);

        /// <summary>
        /// Add playlist items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="content">Items to add</param>
        /// <param name="index">Position to add items at (optional)</param>
        /// <param name="async">Process request asynchronously (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddPlaylistItemsAsyncWithHttpInfo (string playlistId, AddItemsRequest content, decimal? index = null, bool? async = null);
        /// <summary>
        /// Clear playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ClearPlaylistAsync (string playlistId);

        /// <summary>
        /// Clear playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClearPlaylistAsyncWithHttpInfo (string playlistId);
        /// <summary>
        /// Copy playlist items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="content">Indexes of items to copy</param>
        /// <param name="targetIndex">Position to copy items to. Items are copied to the end of the playlist by default (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CopyPlaylistItemsAsync (string playlistId, ItemIndexesRequest content, decimal? targetIndex = null);

        /// <summary>
        /// Copy playlist items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="content">Indexes of items to copy</param>
        /// <param name="targetIndex">Position to copy items to. Items are copied to the end of the playlist by default (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CopyPlaylistItemsAsyncWithHttpInfo (string playlistId, ItemIndexesRequest content, decimal? targetIndex = null);
        /// <summary>
        /// Copy playlist items between playlists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">Source playlist id or index</param>
        /// <param name="targetId">Target playlist id or index</param>
        /// <param name="content">Indexes of items to copy</param>
        /// <param name="targetIndex">Playlist position to copy items to. Items are copied to the end of the playlist by default (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CopyPlaylistItemsExAsync (string sourceId, string targetId, ItemIndexesRequest content, decimal? targetIndex = null);

        /// <summary>
        /// Copy playlist items between playlists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">Source playlist id or index</param>
        /// <param name="targetId">Target playlist id or index</param>
        /// <param name="content">Indexes of items to copy</param>
        /// <param name="targetIndex">Playlist position to copy items to. Items are copied to the end of the playlist by default (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CopyPlaylistItemsExAsyncWithHttpInfo (string sourceId, string targetId, ItemIndexesRequest content, decimal? targetIndex = null);
        /// <summary>
        /// Get playlist items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="range">Playlist item range in form offset:count</param>
        /// <param name="columns">Item columns to return</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> GetPlaylistItemsAsync (string playlistId, string range, List<string> columns);

        /// <summary>
        /// Get playlist items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="range">Playlist item range in form offset:count</param>
        /// <param name="columns">Item columns to return</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetPlaylistItemsAsyncWithHttpInfo (string playlistId, string range, List<string> columns);
        /// <summary>
        /// Get playlists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> GetPlaylistsAsync ();

        /// <summary>
        /// Get playlists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetPlaylistsAsyncWithHttpInfo ();
        /// <summary>
        /// Move playlist to new position
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="index">Target position. Use negative value to move to the last position</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MovePlaylistAsync (string playlistId, string index);

        /// <summary>
        /// Move playlist to new position
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="index">Target position. Use negative value to move to the last position</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MovePlaylistAsyncWithHttpInfo (string playlistId, string index);
        /// <summary>
        /// Move playlist items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="content">Indexes of items to move</param>
        /// <param name="targetIndex">Position to move items to. Items are moved to the end of the playlist by default (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MovePlaylistItemsAsync (string playlistId, ItemIndexesRequest content, decimal? targetIndex = null);

        /// <summary>
        /// Move playlist items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="content">Indexes of items to move</param>
        /// <param name="targetIndex">Position to move items to. Items are moved to the end of the playlist by default (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MovePlaylistItemsAsyncWithHttpInfo (string playlistId, ItemIndexesRequest content, decimal? targetIndex = null);
        /// <summary>
        /// Move playlist items between playlists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">Source playlist id or index</param>
        /// <param name="targetId">Target playlist id or index</param>
        /// <param name="content">Indexes of items to move</param>
        /// <param name="targetIndex">Position to move items to. Items are moved to the end of the playlist by default (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MovePlaylistItemsExAsync (string sourceId, string targetId, ItemIndexesRequest content, decimal? targetIndex = null);

        /// <summary>
        /// Move playlist items between playlists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">Source playlist id or index</param>
        /// <param name="targetId">Target playlist id or index</param>
        /// <param name="content">Indexes of items to move</param>
        /// <param name="targetIndex">Position to move items to. Items are moved to the end of the playlist by default (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MovePlaylistItemsExAsyncWithHttpInfo (string sourceId, string targetId, ItemIndexesRequest content, decimal? targetIndex = null);
        /// <summary>
        /// Remove playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemovePlaylistAsync (string playlistId);

        /// <summary>
        /// Remove playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemovePlaylistAsyncWithHttpInfo (string playlistId);
        /// <summary>
        /// Remove playlist items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="content">Indexes of items to remove</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemovePlaylistItemsAsync (string playlistId, ItemIndexesRequest content);

        /// <summary>
        /// Remove playlist items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="content">Indexes of items to remove</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemovePlaylistItemsAsyncWithHttpInfo (string playlistId, ItemIndexesRequest content);
        /// <summary>
        /// Sort playlist items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="by">Expression to sort by (e.g. %title%) (optional)</param>
        /// <param name="desc">Sort in descending order (optional)</param>
        /// <param name="random">Sort randomly (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SortPlaylistItemsAsync (string playlistId, string by = null, bool? desc = null, bool? random = null);

        /// <summary>
        /// Sort playlist items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="by">Expression to sort by (e.g. %title%) (optional)</param>
        /// <param name="desc">Sort in descending order (optional)</param>
        /// <param name="random">Sort randomly (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SortPlaylistItemsAsyncWithHttpInfo (string playlistId, string by = null, bool? desc = null, bool? random = null);
        /// <summary>
        /// Update playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="title">New playlist title (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdatePlaylistAsync (string playlistId, string title = null);

        /// <summary>
        /// Update playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="title">New playlist title (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePlaylistAsyncWithHttpInfo (string playlistId, string title = null);
        /// <summary>
        /// Update playlist collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="current">Playlist id or index to make current (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdatePlaylistsAsync (string current = null);

        /// <summary>
        /// Update playlist collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="current">Playlist id or index to make current (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePlaylistsAsyncWithHttpInfo (string current = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PlaylistsApi : IPlaylistsApi
    {
        private Foobar2000.RESTClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PlaylistsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlaylistsApi(String basePath)
        {
            this.Configuration = new Foobar2000.RESTClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Foobar2000.RESTClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlaylistsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PlaylistsApi(Foobar2000.RESTClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Foobar2000.RESTClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Foobar2000.RESTClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Foobar2000.RESTClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Foobar2000.RESTClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add playlist 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Position to add playlist at. By default playlist is added to the last position (optional)</param>
        /// <param name="title">New playlist title (optional)</param>
        /// <returns></returns>
        public void AddPlaylist (decimal? index = null, string title = null)
        {
             AddPlaylistWithHttpInfo(index, title);
        }

        /// <summary>
        /// Add playlist 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Position to add playlist at. By default playlist is added to the last position (optional)</param>
        /// <param name="title">New playlist title (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddPlaylistWithHttpInfo (decimal? index = null, string title = null)
        {

            var localVarPath = "/playlists/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "index", index)); // query parameter
            if (title != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "title", title)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPlaylist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add playlist 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Position to add playlist at. By default playlist is added to the last position (optional)</param>
        /// <param name="title">New playlist title (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddPlaylistAsync (decimal? index = null, string title = null)
        {
             await AddPlaylistAsyncWithHttpInfo(index, title);

        }

        /// <summary>
        /// Add playlist 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Position to add playlist at. By default playlist is added to the last position (optional)</param>
        /// <param name="title">New playlist title (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddPlaylistAsyncWithHttpInfo (decimal? index = null, string title = null)
        {

            var localVarPath = "/playlists/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "index", index)); // query parameter
            if (title != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "title", title)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPlaylist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add playlist items 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="content">Items to add</param>
        /// <param name="index">Position to add items at (optional)</param>
        /// <param name="async">Process request asynchronously (optional)</param>
        /// <returns></returns>
        public void AddPlaylistItems (string playlistId, AddItemsRequest content, decimal? index = null, bool? async = null)
        {
             AddPlaylistItemsWithHttpInfo(playlistId, content, index, async);
        }

        /// <summary>
        /// Add playlist items 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="content">Items to add</param>
        /// <param name="index">Position to add items at (optional)</param>
        /// <param name="async">Process request asynchronously (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddPlaylistItemsWithHttpInfo (string playlistId, AddItemsRequest content, decimal? index = null, bool? async = null)
        {
            // verify the required parameter 'playlistId' is set
            if (playlistId == null)
                throw new ApiException(400, "Missing required parameter 'playlistId' when calling PlaylistsApi->AddPlaylistItems");
            // verify the required parameter 'content' is set
            if (content == null)
                throw new ApiException(400, "Missing required parameter 'content' when calling PlaylistsApi->AddPlaylistItems");

            var localVarPath = "/playlists/{playlistId}/items/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playlistId != null) localVarPathParams.Add("playlistId", this.Configuration.ApiClient.ParameterToString(playlistId)); // path parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "index", index)); // query parameter
            if (async != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (content != null && content.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(content); // http body (model) parameter
            }
            else
            {
                localVarPostBody = content; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPlaylistItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add playlist items 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="content">Items to add</param>
        /// <param name="index">Position to add items at (optional)</param>
        /// <param name="async">Process request asynchronously (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddPlaylistItemsAsync (string playlistId, AddItemsRequest content, decimal? index = null, bool? async = null)
        {
             await AddPlaylistItemsAsyncWithHttpInfo(playlistId, content, index, async);

        }

        /// <summary>
        /// Add playlist items 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="content">Items to add</param>
        /// <param name="index">Position to add items at (optional)</param>
        /// <param name="async">Process request asynchronously (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddPlaylistItemsAsyncWithHttpInfo (string playlistId, AddItemsRequest content, decimal? index = null, bool? async = null)
        {
            // verify the required parameter 'playlistId' is set
            if (playlistId == null)
                throw new ApiException(400, "Missing required parameter 'playlistId' when calling PlaylistsApi->AddPlaylistItems");
            // verify the required parameter 'content' is set
            if (content == null)
                throw new ApiException(400, "Missing required parameter 'content' when calling PlaylistsApi->AddPlaylistItems");

            var localVarPath = "/playlists/{playlistId}/items/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playlistId != null) localVarPathParams.Add("playlistId", this.Configuration.ApiClient.ParameterToString(playlistId)); // path parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "index", index)); // query parameter
            if (async != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (content != null && content.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(content); // http body (model) parameter
            }
            else
            {
                localVarPostBody = content; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPlaylistItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Clear playlist 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <returns></returns>
        public void ClearPlaylist (string playlistId)
        {
             ClearPlaylistWithHttpInfo(playlistId);
        }

        /// <summary>
        /// Clear playlist 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ClearPlaylistWithHttpInfo (string playlistId)
        {
            // verify the required parameter 'playlistId' is set
            if (playlistId == null)
                throw new ApiException(400, "Missing required parameter 'playlistId' when calling PlaylistsApi->ClearPlaylist");

            var localVarPath = "/playlists/{playlistId}/clear";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playlistId != null) localVarPathParams.Add("playlistId", this.Configuration.ApiClient.ParameterToString(playlistId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClearPlaylist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Clear playlist 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ClearPlaylistAsync (string playlistId)
        {
             await ClearPlaylistAsyncWithHttpInfo(playlistId);

        }

        /// <summary>
        /// Clear playlist 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ClearPlaylistAsyncWithHttpInfo (string playlistId)
        {
            // verify the required parameter 'playlistId' is set
            if (playlistId == null)
                throw new ApiException(400, "Missing required parameter 'playlistId' when calling PlaylistsApi->ClearPlaylist");

            var localVarPath = "/playlists/{playlistId}/clear";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playlistId != null) localVarPathParams.Add("playlistId", this.Configuration.ApiClient.ParameterToString(playlistId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClearPlaylist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Copy playlist items 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="content">Indexes of items to copy</param>
        /// <param name="targetIndex">Position to copy items to. Items are copied to the end of the playlist by default (optional)</param>
        /// <returns></returns>
        public void CopyPlaylistItems (string playlistId, ItemIndexesRequest content, decimal? targetIndex = null)
        {
             CopyPlaylistItemsWithHttpInfo(playlistId, content, targetIndex);
        }

        /// <summary>
        /// Copy playlist items 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="content">Indexes of items to copy</param>
        /// <param name="targetIndex">Position to copy items to. Items are copied to the end of the playlist by default (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CopyPlaylistItemsWithHttpInfo (string playlistId, ItemIndexesRequest content, decimal? targetIndex = null)
        {
            // verify the required parameter 'playlistId' is set
            if (playlistId == null)
                throw new ApiException(400, "Missing required parameter 'playlistId' when calling PlaylistsApi->CopyPlaylistItems");
            // verify the required parameter 'content' is set
            if (content == null)
                throw new ApiException(400, "Missing required parameter 'content' when calling PlaylistsApi->CopyPlaylistItems");

            var localVarPath = "/playlists/{playlistId}/items/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playlistId != null) localVarPathParams.Add("playlistId", this.Configuration.ApiClient.ParameterToString(playlistId)); // path parameter
            if (targetIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "targetIndex", targetIndex)); // query parameter
            if (content != null && content.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(content); // http body (model) parameter
            }
            else
            {
                localVarPostBody = content; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CopyPlaylistItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Copy playlist items 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="content">Indexes of items to copy</param>
        /// <param name="targetIndex">Position to copy items to. Items are copied to the end of the playlist by default (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CopyPlaylistItemsAsync (string playlistId, ItemIndexesRequest content, decimal? targetIndex = null)
        {
             await CopyPlaylistItemsAsyncWithHttpInfo(playlistId, content, targetIndex);

        }

        /// <summary>
        /// Copy playlist items 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="content">Indexes of items to copy</param>
        /// <param name="targetIndex">Position to copy items to. Items are copied to the end of the playlist by default (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CopyPlaylistItemsAsyncWithHttpInfo (string playlistId, ItemIndexesRequest content, decimal? targetIndex = null)
        {
            // verify the required parameter 'playlistId' is set
            if (playlistId == null)
                throw new ApiException(400, "Missing required parameter 'playlistId' when calling PlaylistsApi->CopyPlaylistItems");
            // verify the required parameter 'content' is set
            if (content == null)
                throw new ApiException(400, "Missing required parameter 'content' when calling PlaylistsApi->CopyPlaylistItems");

            var localVarPath = "/playlists/{playlistId}/items/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playlistId != null) localVarPathParams.Add("playlistId", this.Configuration.ApiClient.ParameterToString(playlistId)); // path parameter
            if (targetIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "targetIndex", targetIndex)); // query parameter
            if (content != null && content.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(content); // http body (model) parameter
            }
            else
            {
                localVarPostBody = content; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CopyPlaylistItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Copy playlist items between playlists 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">Source playlist id or index</param>
        /// <param name="targetId">Target playlist id or index</param>
        /// <param name="content">Indexes of items to copy</param>
        /// <param name="targetIndex">Playlist position to copy items to. Items are copied to the end of the playlist by default (optional)</param>
        /// <returns></returns>
        public void CopyPlaylistItemsEx (string sourceId, string targetId, ItemIndexesRequest content, decimal? targetIndex = null)
        {
             CopyPlaylistItemsExWithHttpInfo(sourceId, targetId, content, targetIndex);
        }

        /// <summary>
        /// Copy playlist items between playlists 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">Source playlist id or index</param>
        /// <param name="targetId">Target playlist id or index</param>
        /// <param name="content">Indexes of items to copy</param>
        /// <param name="targetIndex">Playlist position to copy items to. Items are copied to the end of the playlist by default (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CopyPlaylistItemsExWithHttpInfo (string sourceId, string targetId, ItemIndexesRequest content, decimal? targetIndex = null)
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
                throw new ApiException(400, "Missing required parameter 'sourceId' when calling PlaylistsApi->CopyPlaylistItemsEx");
            // verify the required parameter 'targetId' is set
            if (targetId == null)
                throw new ApiException(400, "Missing required parameter 'targetId' when calling PlaylistsApi->CopyPlaylistItemsEx");
            // verify the required parameter 'content' is set
            if (content == null)
                throw new ApiException(400, "Missing required parameter 'content' when calling PlaylistsApi->CopyPlaylistItemsEx");

            var localVarPath = "/playlists/{sourceId}/{targetId}/items/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sourceId != null) localVarPathParams.Add("sourceId", this.Configuration.ApiClient.ParameterToString(sourceId)); // path parameter
            if (targetId != null) localVarPathParams.Add("targetId", this.Configuration.ApiClient.ParameterToString(targetId)); // path parameter
            if (targetIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "targetIndex", targetIndex)); // query parameter
            if (content != null && content.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(content); // http body (model) parameter
            }
            else
            {
                localVarPostBody = content; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CopyPlaylistItemsEx", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Copy playlist items between playlists 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">Source playlist id or index</param>
        /// <param name="targetId">Target playlist id or index</param>
        /// <param name="content">Indexes of items to copy</param>
        /// <param name="targetIndex">Playlist position to copy items to. Items are copied to the end of the playlist by default (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CopyPlaylistItemsExAsync (string sourceId, string targetId, ItemIndexesRequest content, decimal? targetIndex = null)
        {
             await CopyPlaylistItemsExAsyncWithHttpInfo(sourceId, targetId, content, targetIndex);

        }

        /// <summary>
        /// Copy playlist items between playlists 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">Source playlist id or index</param>
        /// <param name="targetId">Target playlist id or index</param>
        /// <param name="content">Indexes of items to copy</param>
        /// <param name="targetIndex">Playlist position to copy items to. Items are copied to the end of the playlist by default (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CopyPlaylistItemsExAsyncWithHttpInfo (string sourceId, string targetId, ItemIndexesRequest content, decimal? targetIndex = null)
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
                throw new ApiException(400, "Missing required parameter 'sourceId' when calling PlaylistsApi->CopyPlaylistItemsEx");
            // verify the required parameter 'targetId' is set
            if (targetId == null)
                throw new ApiException(400, "Missing required parameter 'targetId' when calling PlaylistsApi->CopyPlaylistItemsEx");
            // verify the required parameter 'content' is set
            if (content == null)
                throw new ApiException(400, "Missing required parameter 'content' when calling PlaylistsApi->CopyPlaylistItemsEx");

            var localVarPath = "/playlists/{sourceId}/{targetId}/items/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sourceId != null) localVarPathParams.Add("sourceId", this.Configuration.ApiClient.ParameterToString(sourceId)); // path parameter
            if (targetId != null) localVarPathParams.Add("targetId", this.Configuration.ApiClient.ParameterToString(targetId)); // path parameter
            if (targetIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "targetIndex", targetIndex)); // query parameter
            if (content != null && content.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(content); // http body (model) parameter
            }
            else
            {
                localVarPostBody = content; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CopyPlaylistItemsEx", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get playlist items 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="range">Playlist item range in form offset:count</param>
        /// <param name="columns">Item columns to return</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 GetPlaylistItems (string playlistId, string range, List<string> columns)
        {
             ApiResponse<InlineResponse2002> localVarResponse = GetPlaylistItemsWithHttpInfo(playlistId, range, columns);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get playlist items 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="range">Playlist item range in form offset:count</param>
        /// <param name="columns">Item columns to return</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse< InlineResponse2002 > GetPlaylistItemsWithHttpInfo (string playlistId, string range, List<string> columns)
        {
            // verify the required parameter 'playlistId' is set
            if (playlistId == null)
                throw new ApiException(400, "Missing required parameter 'playlistId' when calling PlaylistsApi->GetPlaylistItems");
            // verify the required parameter 'range' is set
            if (range == null)
                throw new ApiException(400, "Missing required parameter 'range' when calling PlaylistsApi->GetPlaylistItems");
            // verify the required parameter 'columns' is set
            if (columns == null)
                throw new ApiException(400, "Missing required parameter 'columns' when calling PlaylistsApi->GetPlaylistItems");

            var localVarPath = "/playlists/{playlistId}/items/{range}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playlistId != null) localVarPathParams.Add("playlistId", this.Configuration.ApiClient.ParameterToString(playlistId)); // path parameter
            if (range != null) localVarPathParams.Add("range", this.Configuration.ApiClient.ParameterToString(range)); // path parameter
            if (columns != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "columns", columns)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlaylistItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        /// Get playlist items 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="range">Playlist item range in form offset:count</param>
        /// <param name="columns">Item columns to return</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> GetPlaylistItemsAsync (string playlistId, string range, List<string> columns)
        {
             ApiResponse<InlineResponse2002> localVarResponse = await GetPlaylistItemsAsyncWithHttpInfo(playlistId, range, columns);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get playlist items 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="range">Playlist item range in form offset:count</param>
        /// <param name="columns">Item columns to return</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetPlaylistItemsAsyncWithHttpInfo (string playlistId, string range, List<string> columns)
        {
            // verify the required parameter 'playlistId' is set
            if (playlistId == null)
                throw new ApiException(400, "Missing required parameter 'playlistId' when calling PlaylistsApi->GetPlaylistItems");
            // verify the required parameter 'range' is set
            if (range == null)
                throw new ApiException(400, "Missing required parameter 'range' when calling PlaylistsApi->GetPlaylistItems");
            // verify the required parameter 'columns' is set
            if (columns == null)
                throw new ApiException(400, "Missing required parameter 'columns' when calling PlaylistsApi->GetPlaylistItems");

            var localVarPath = "/playlists/{playlistId}/items/{range}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playlistId != null) localVarPathParams.Add("playlistId", this.Configuration.ApiClient.ParameterToString(playlistId)); // path parameter
            if (range != null) localVarPathParams.Add("range", this.Configuration.ApiClient.ParameterToString(range)); // path parameter
            if (columns != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "columns", columns)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlaylistItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        /// Get playlists 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 GetPlaylists ()
        {
             ApiResponse<InlineResponse2001> localVarResponse = GetPlaylistsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get playlists 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > GetPlaylistsWithHttpInfo ()
        {

            var localVarPath = "/playlists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlaylists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Get playlists 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> GetPlaylistsAsync ()
        {
             ApiResponse<InlineResponse2001> localVarResponse = await GetPlaylistsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get playlists 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetPlaylistsAsyncWithHttpInfo ()
        {

            var localVarPath = "/playlists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlaylists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Move playlist to new position 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="index">Target position. Use negative value to move to the last position</param>
        /// <returns></returns>
        public void MovePlaylist (string playlistId, string index)
        {
             MovePlaylistWithHttpInfo(playlistId, index);
        }

        /// <summary>
        /// Move playlist to new position 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="index">Target position. Use negative value to move to the last position</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MovePlaylistWithHttpInfo (string playlistId, string index)
        {
            // verify the required parameter 'playlistId' is set
            if (playlistId == null)
                throw new ApiException(400, "Missing required parameter 'playlistId' when calling PlaylistsApi->MovePlaylist");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling PlaylistsApi->MovePlaylist");

            var localVarPath = "/playlists/move/{playlistId}/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playlistId != null) localVarPathParams.Add("playlistId", this.Configuration.ApiClient.ParameterToString(playlistId)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MovePlaylist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Move playlist to new position 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="index">Target position. Use negative value to move to the last position</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MovePlaylistAsync (string playlistId, string index)
        {
             await MovePlaylistAsyncWithHttpInfo(playlistId, index);

        }

        /// <summary>
        /// Move playlist to new position 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="index">Target position. Use negative value to move to the last position</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MovePlaylistAsyncWithHttpInfo (string playlistId, string index)
        {
            // verify the required parameter 'playlistId' is set
            if (playlistId == null)
                throw new ApiException(400, "Missing required parameter 'playlistId' when calling PlaylistsApi->MovePlaylist");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling PlaylistsApi->MovePlaylist");

            var localVarPath = "/playlists/move/{playlistId}/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playlistId != null) localVarPathParams.Add("playlistId", this.Configuration.ApiClient.ParameterToString(playlistId)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MovePlaylist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Move playlist items 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="content">Indexes of items to move</param>
        /// <param name="targetIndex">Position to move items to. Items are moved to the end of the playlist by default (optional)</param>
        /// <returns></returns>
        public void MovePlaylistItems (string playlistId, ItemIndexesRequest content, decimal? targetIndex = null)
        {
             MovePlaylistItemsWithHttpInfo(playlistId, content, targetIndex);
        }

        /// <summary>
        /// Move playlist items 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="content">Indexes of items to move</param>
        /// <param name="targetIndex">Position to move items to. Items are moved to the end of the playlist by default (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MovePlaylistItemsWithHttpInfo (string playlistId, ItemIndexesRequest content, decimal? targetIndex = null)
        {
            // verify the required parameter 'playlistId' is set
            if (playlistId == null)
                throw new ApiException(400, "Missing required parameter 'playlistId' when calling PlaylistsApi->MovePlaylistItems");
            // verify the required parameter 'content' is set
            if (content == null)
                throw new ApiException(400, "Missing required parameter 'content' when calling PlaylistsApi->MovePlaylistItems");

            var localVarPath = "/playlists/{playlistId}/items/move";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playlistId != null) localVarPathParams.Add("playlistId", this.Configuration.ApiClient.ParameterToString(playlistId)); // path parameter
            if (targetIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "targetIndex", targetIndex)); // query parameter
            if (content != null && content.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(content); // http body (model) parameter
            }
            else
            {
                localVarPostBody = content; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MovePlaylistItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Move playlist items 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="content">Indexes of items to move</param>
        /// <param name="targetIndex">Position to move items to. Items are moved to the end of the playlist by default (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MovePlaylistItemsAsync (string playlistId, ItemIndexesRequest content, decimal? targetIndex = null)
        {
             await MovePlaylistItemsAsyncWithHttpInfo(playlistId, content, targetIndex);

        }

        /// <summary>
        /// Move playlist items 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="content">Indexes of items to move</param>
        /// <param name="targetIndex">Position to move items to. Items are moved to the end of the playlist by default (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MovePlaylistItemsAsyncWithHttpInfo (string playlistId, ItemIndexesRequest content, decimal? targetIndex = null)
        {
            // verify the required parameter 'playlistId' is set
            if (playlistId == null)
                throw new ApiException(400, "Missing required parameter 'playlistId' when calling PlaylistsApi->MovePlaylistItems");
            // verify the required parameter 'content' is set
            if (content == null)
                throw new ApiException(400, "Missing required parameter 'content' when calling PlaylistsApi->MovePlaylistItems");

            var localVarPath = "/playlists/{playlistId}/items/move";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playlistId != null) localVarPathParams.Add("playlistId", this.Configuration.ApiClient.ParameterToString(playlistId)); // path parameter
            if (targetIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "targetIndex", targetIndex)); // query parameter
            if (content != null && content.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(content); // http body (model) parameter
            }
            else
            {
                localVarPostBody = content; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MovePlaylistItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Move playlist items between playlists 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">Source playlist id or index</param>
        /// <param name="targetId">Target playlist id or index</param>
        /// <param name="content">Indexes of items to move</param>
        /// <param name="targetIndex">Position to move items to. Items are moved to the end of the playlist by default (optional)</param>
        /// <returns></returns>
        public void MovePlaylistItemsEx (string sourceId, string targetId, ItemIndexesRequest content, decimal? targetIndex = null)
        {
             MovePlaylistItemsExWithHttpInfo(sourceId, targetId, content, targetIndex);
        }

        /// <summary>
        /// Move playlist items between playlists 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">Source playlist id or index</param>
        /// <param name="targetId">Target playlist id or index</param>
        /// <param name="content">Indexes of items to move</param>
        /// <param name="targetIndex">Position to move items to. Items are moved to the end of the playlist by default (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MovePlaylistItemsExWithHttpInfo (string sourceId, string targetId, ItemIndexesRequest content, decimal? targetIndex = null)
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
                throw new ApiException(400, "Missing required parameter 'sourceId' when calling PlaylistsApi->MovePlaylistItemsEx");
            // verify the required parameter 'targetId' is set
            if (targetId == null)
                throw new ApiException(400, "Missing required parameter 'targetId' when calling PlaylistsApi->MovePlaylistItemsEx");
            // verify the required parameter 'content' is set
            if (content == null)
                throw new ApiException(400, "Missing required parameter 'content' when calling PlaylistsApi->MovePlaylistItemsEx");

            var localVarPath = "/playlists/{sourceId}/{targetId}/items/move";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sourceId != null) localVarPathParams.Add("sourceId", this.Configuration.ApiClient.ParameterToString(sourceId)); // path parameter
            if (targetId != null) localVarPathParams.Add("targetId", this.Configuration.ApiClient.ParameterToString(targetId)); // path parameter
            if (targetIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "targetIndex", targetIndex)); // query parameter
            if (content != null && content.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(content); // http body (model) parameter
            }
            else
            {
                localVarPostBody = content; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MovePlaylistItemsEx", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Move playlist items between playlists 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">Source playlist id or index</param>
        /// <param name="targetId">Target playlist id or index</param>
        /// <param name="content">Indexes of items to move</param>
        /// <param name="targetIndex">Position to move items to. Items are moved to the end of the playlist by default (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MovePlaylistItemsExAsync (string sourceId, string targetId, ItemIndexesRequest content, decimal? targetIndex = null)
        {
             await MovePlaylistItemsExAsyncWithHttpInfo(sourceId, targetId, content, targetIndex);

        }

        /// <summary>
        /// Move playlist items between playlists 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">Source playlist id or index</param>
        /// <param name="targetId">Target playlist id or index</param>
        /// <param name="content">Indexes of items to move</param>
        /// <param name="targetIndex">Position to move items to. Items are moved to the end of the playlist by default (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MovePlaylistItemsExAsyncWithHttpInfo (string sourceId, string targetId, ItemIndexesRequest content, decimal? targetIndex = null)
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
                throw new ApiException(400, "Missing required parameter 'sourceId' when calling PlaylistsApi->MovePlaylistItemsEx");
            // verify the required parameter 'targetId' is set
            if (targetId == null)
                throw new ApiException(400, "Missing required parameter 'targetId' when calling PlaylistsApi->MovePlaylistItemsEx");
            // verify the required parameter 'content' is set
            if (content == null)
                throw new ApiException(400, "Missing required parameter 'content' when calling PlaylistsApi->MovePlaylistItemsEx");

            var localVarPath = "/playlists/{sourceId}/{targetId}/items/move";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sourceId != null) localVarPathParams.Add("sourceId", this.Configuration.ApiClient.ParameterToString(sourceId)); // path parameter
            if (targetId != null) localVarPathParams.Add("targetId", this.Configuration.ApiClient.ParameterToString(targetId)); // path parameter
            if (targetIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "targetIndex", targetIndex)); // query parameter
            if (content != null && content.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(content); // http body (model) parameter
            }
            else
            {
                localVarPostBody = content; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MovePlaylistItemsEx", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove playlist 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <returns></returns>
        public void RemovePlaylist (string playlistId)
        {
             RemovePlaylistWithHttpInfo(playlistId);
        }

        /// <summary>
        /// Remove playlist 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemovePlaylistWithHttpInfo (string playlistId)
        {
            // verify the required parameter 'playlistId' is set
            if (playlistId == null)
                throw new ApiException(400, "Missing required parameter 'playlistId' when calling PlaylistsApi->RemovePlaylist");

            var localVarPath = "/playlists/remove/{playlistId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playlistId != null) localVarPathParams.Add("playlistId", this.Configuration.ApiClient.ParameterToString(playlistId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemovePlaylist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove playlist 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemovePlaylistAsync (string playlistId)
        {
             await RemovePlaylistAsyncWithHttpInfo(playlistId);

        }

        /// <summary>
        /// Remove playlist 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemovePlaylistAsyncWithHttpInfo (string playlistId)
        {
            // verify the required parameter 'playlistId' is set
            if (playlistId == null)
                throw new ApiException(400, "Missing required parameter 'playlistId' when calling PlaylistsApi->RemovePlaylist");

            var localVarPath = "/playlists/remove/{playlistId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playlistId != null) localVarPathParams.Add("playlistId", this.Configuration.ApiClient.ParameterToString(playlistId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemovePlaylist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove playlist items 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="content">Indexes of items to remove</param>
        /// <returns></returns>
        public void RemovePlaylistItems (string playlistId, ItemIndexesRequest content)
        {
             RemovePlaylistItemsWithHttpInfo(playlistId, content);
        }

        /// <summary>
        /// Remove playlist items 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="content">Indexes of items to remove</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemovePlaylistItemsWithHttpInfo (string playlistId, ItemIndexesRequest content)
        {
            // verify the required parameter 'playlistId' is set
            if (playlistId == null)
                throw new ApiException(400, "Missing required parameter 'playlistId' when calling PlaylistsApi->RemovePlaylistItems");
            // verify the required parameter 'content' is set
            if (content == null)
                throw new ApiException(400, "Missing required parameter 'content' when calling PlaylistsApi->RemovePlaylistItems");

            var localVarPath = "/playlists/{playlistId}/items/remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playlistId != null) localVarPathParams.Add("playlistId", this.Configuration.ApiClient.ParameterToString(playlistId)); // path parameter
            if (content != null && content.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(content); // http body (model) parameter
            }
            else
            {
                localVarPostBody = content; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemovePlaylistItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove playlist items 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="content">Indexes of items to remove</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemovePlaylistItemsAsync (string playlistId, ItemIndexesRequest content)
        {
             await RemovePlaylistItemsAsyncWithHttpInfo(playlistId, content);

        }

        /// <summary>
        /// Remove playlist items 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="content">Indexes of items to remove</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemovePlaylistItemsAsyncWithHttpInfo (string playlistId, ItemIndexesRequest content)
        {
            // verify the required parameter 'playlistId' is set
            if (playlistId == null)
                throw new ApiException(400, "Missing required parameter 'playlistId' when calling PlaylistsApi->RemovePlaylistItems");
            // verify the required parameter 'content' is set
            if (content == null)
                throw new ApiException(400, "Missing required parameter 'content' when calling PlaylistsApi->RemovePlaylistItems");

            var localVarPath = "/playlists/{playlistId}/items/remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playlistId != null) localVarPathParams.Add("playlistId", this.Configuration.ApiClient.ParameterToString(playlistId)); // path parameter
            if (content != null && content.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(content); // http body (model) parameter
            }
            else
            {
                localVarPostBody = content; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemovePlaylistItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Sort playlist items 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="by">Expression to sort by (e.g. %title%) (optional)</param>
        /// <param name="desc">Sort in descending order (optional)</param>
        /// <param name="random">Sort randomly (optional)</param>
        /// <returns></returns>
        public void SortPlaylistItems (string playlistId, string by = null, bool? desc = null, bool? random = null)
        {
             SortPlaylistItemsWithHttpInfo(playlistId, by, desc, random);
        }

        /// <summary>
        /// Sort playlist items 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="by">Expression to sort by (e.g. %title%) (optional)</param>
        /// <param name="desc">Sort in descending order (optional)</param>
        /// <param name="random">Sort randomly (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SortPlaylistItemsWithHttpInfo (string playlistId, string by = null, bool? desc = null, bool? random = null)
        {
            // verify the required parameter 'playlistId' is set
            if (playlistId == null)
                throw new ApiException(400, "Missing required parameter 'playlistId' when calling PlaylistsApi->SortPlaylistItems");

            var localVarPath = "/playlists/{playlistId}/items/sort";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playlistId != null) localVarPathParams.Add("playlistId", this.Configuration.ApiClient.ParameterToString(playlistId)); // path parameter
            if (by != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "by", by)); // query parameter
            if (desc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "desc", desc)); // query parameter
            if (random != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "random", random)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SortPlaylistItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Sort playlist items 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="by">Expression to sort by (e.g. %title%) (optional)</param>
        /// <param name="desc">Sort in descending order (optional)</param>
        /// <param name="random">Sort randomly (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SortPlaylistItemsAsync (string playlistId, string by = null, bool? desc = null, bool? random = null)
        {
             await SortPlaylistItemsAsyncWithHttpInfo(playlistId, by, desc, random);

        }

        /// <summary>
        /// Sort playlist items 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="by">Expression to sort by (e.g. %title%) (optional)</param>
        /// <param name="desc">Sort in descending order (optional)</param>
        /// <param name="random">Sort randomly (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SortPlaylistItemsAsyncWithHttpInfo (string playlistId, string by = null, bool? desc = null, bool? random = null)
        {
            // verify the required parameter 'playlistId' is set
            if (playlistId == null)
                throw new ApiException(400, "Missing required parameter 'playlistId' when calling PlaylistsApi->SortPlaylistItems");

            var localVarPath = "/playlists/{playlistId}/items/sort";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playlistId != null) localVarPathParams.Add("playlistId", this.Configuration.ApiClient.ParameterToString(playlistId)); // path parameter
            if (by != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "by", by)); // query parameter
            if (desc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "desc", desc)); // query parameter
            if (random != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "random", random)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SortPlaylistItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update playlist 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="title">New playlist title (optional)</param>
        /// <returns></returns>
        public void UpdatePlaylist (string playlistId, string title = null)
        {
             UpdatePlaylistWithHttpInfo(playlistId, title);
        }

        /// <summary>
        /// Update playlist 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="title">New playlist title (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdatePlaylistWithHttpInfo (string playlistId, string title = null)
        {
            // verify the required parameter 'playlistId' is set
            if (playlistId == null)
                throw new ApiException(400, "Missing required parameter 'playlistId' when calling PlaylistsApi->UpdatePlaylist");

            var localVarPath = "/playlists/{playlistId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playlistId != null) localVarPathParams.Add("playlistId", this.Configuration.ApiClient.ParameterToString(playlistId)); // path parameter
            if (title != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "title", title)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePlaylist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update playlist 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="title">New playlist title (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdatePlaylistAsync (string playlistId, string title = null)
        {
             await UpdatePlaylistAsyncWithHttpInfo(playlistId, title);

        }

        /// <summary>
        /// Update playlist 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="title">New playlist title (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePlaylistAsyncWithHttpInfo (string playlistId, string title = null)
        {
            // verify the required parameter 'playlistId' is set
            if (playlistId == null)
                throw new ApiException(400, "Missing required parameter 'playlistId' when calling PlaylistsApi->UpdatePlaylist");

            var localVarPath = "/playlists/{playlistId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playlistId != null) localVarPathParams.Add("playlistId", this.Configuration.ApiClient.ParameterToString(playlistId)); // path parameter
            if (title != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "title", title)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePlaylist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update playlist collection 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="current">Playlist id or index to make current (optional)</param>
        /// <returns></returns>
        public void UpdatePlaylists (string current = null)
        {
             UpdatePlaylistsWithHttpInfo(current);
        }

        /// <summary>
        /// Update playlist collection 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="current">Playlist id or index to make current (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdatePlaylistsWithHttpInfo (string current = null)
        {

            var localVarPath = "/playlists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (current != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "current", current)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePlaylists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update playlist collection 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="current">Playlist id or index to make current (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdatePlaylistsAsync (string current = null)
        {
             await UpdatePlaylistsAsyncWithHttpInfo(current);

        }

        /// <summary>
        /// Update playlist collection 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="current">Playlist id or index to make current (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePlaylistsAsyncWithHttpInfo (string current = null)
        {

            var localVarPath = "/playlists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (current != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "current", current)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePlaylists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
