/* 
 * Player API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace Foobar2000.RESTClient.Model
{
    /// <summary>
    /// PlayerStateActiveItem
    /// </summary>
    [DataContract]
    public partial class PlayerStateActiveItem :  IEquatable<PlayerStateActiveItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerStateActiveItem" /> class.
        /// </summary>
        /// <param name="playlistId">playlistId.</param>
        /// <param name="playlistIndex">playlistIndex.</param>
        /// <param name="index">index.</param>
        /// <param name="position">position.</param>
        /// <param name="duration">duration.</param>
        /// <param name="columns">columns.</param>
        public PlayerStateActiveItem(string playlistId = default(string), decimal? playlistIndex = default(decimal?), decimal? index = default(decimal?), decimal? position = default(decimal?), decimal? duration = default(decimal?), List<string> columns = default(List<string>))
        {
            this.PlaylistId = playlistId;
            this.PlaylistIndex = playlistIndex;
            this.Index = index;
            this.Position = position;
            this.Duration = duration;
            this.Columns = columns;
        }
        
        /// <summary>
        /// Gets or Sets PlaylistId
        /// </summary>
        [DataMember(Name="playlistId", EmitDefaultValue=false)]
        public string PlaylistId { get; set; }

        /// <summary>
        /// Gets or Sets PlaylistIndex
        /// </summary>
        [DataMember(Name="playlistIndex", EmitDefaultValue=false)]
        public decimal? PlaylistIndex { get; set; }

        /// <summary>
        /// Gets or Sets Index
        /// </summary>
        [DataMember(Name="index", EmitDefaultValue=false)]
        public decimal? Index { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public decimal? Position { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public decimal? Duration { get; set; }

        /// <summary>
        /// Gets or Sets Columns
        /// </summary>
        [DataMember(Name="columns", EmitDefaultValue=false)]
        public List<string> Columns { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlayerStateActiveItem {\n");
            sb.Append("  PlaylistId: ").Append(PlaylistId).Append("\n");
            sb.Append("  PlaylistIndex: ").Append(PlaylistIndex).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Columns: ").Append(Columns).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PlayerStateActiveItem);
        }

        /// <summary>
        /// Returns true if PlayerStateActiveItem instances are equal
        /// </summary>
        /// <param name="input">Instance of PlayerStateActiveItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlayerStateActiveItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PlaylistId == input.PlaylistId ||
                    (this.PlaylistId != null &&
                    this.PlaylistId.Equals(input.PlaylistId))
                ) && 
                (
                    this.PlaylistIndex == input.PlaylistIndex ||
                    (this.PlaylistIndex != null &&
                    this.PlaylistIndex.Equals(input.PlaylistIndex))
                ) && 
                (
                    this.Index == input.Index ||
                    (this.Index != null &&
                    this.Index.Equals(input.Index))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.Columns == input.Columns ||
                    this.Columns != null &&
                    this.Columns.SequenceEqual(input.Columns)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PlaylistId != null)
                    hashCode = hashCode * 59 + this.PlaylistId.GetHashCode();
                if (this.PlaylistIndex != null)
                    hashCode = hashCode * 59 + this.PlaylistIndex.GetHashCode();
                if (this.Index != null)
                    hashCode = hashCode * 59 + this.Index.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.Columns != null)
                    hashCode = hashCode * 59 + this.Columns.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
