/* 
 * Player API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Foobar2000.RESTClient.Client;
using Foobar2000.RESTClient.Model;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace Foobar2000.RESTClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQueryApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player">Request player state (optional)</param>
        /// <param name="trcolumns">Active item columns to return (optional)</param>
        /// <param name="playlists">Request playlists (optional)</param>
        /// <param name="playlistItems">Request playlist items (optional)</param>
        /// <param name="plref">Playlist id or index to return items from (optional)</param>
        /// <param name="plrange">Playlist range to return items from (optional)</param>
        /// <param name="plcolumns">Playlist item columns to return (optional)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 Query (bool? player = null, List<string> trcolumns = null, bool? playlists = null, bool? playlistItems = null, string plref = null, string plrange = null, List<string> plcolumns = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player">Request player state (optional)</param>
        /// <param name="trcolumns">Active item columns to return (optional)</param>
        /// <param name="playlists">Request playlists (optional)</param>
        /// <param name="playlistItems">Request playlist items (optional)</param>
        /// <param name="plref">Playlist id or index to return items from (optional)</param>
        /// <param name="plrange">Playlist range to return items from (optional)</param>
        /// <param name="plcolumns">Playlist item columns to return (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> QueryWithHttpInfo (bool? player = null, List<string> trcolumns = null, bool? playlists = null, bool? playlistItems = null, string plref = null, string plrange = null, List<string> plcolumns = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player">Request player state (optional)</param>
        /// <param name="trcolumns">Active item columns to return (optional)</param>
        /// <param name="playlists">Request playlists (optional)</param>
        /// <param name="playlistItems">Request playlist items (optional)</param>
        /// <param name="plref">Playlist id or index to return items from (optional)</param>
        /// <param name="plrange">Playlist range to return items from (optional)</param>
        /// <param name="plcolumns">Playlist item columns to return (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> QueryAsync (bool? player = null, List<string> trcolumns = null, bool? playlists = null, bool? playlistItems = null, string plref = null, string plrange = null, List<string> plcolumns = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player">Request player state (optional)</param>
        /// <param name="trcolumns">Active item columns to return (optional)</param>
        /// <param name="playlists">Request playlists (optional)</param>
        /// <param name="playlistItems">Request playlist items (optional)</param>
        /// <param name="plref">Playlist id or index to return items from (optional)</param>
        /// <param name="plrange">Playlist range to return items from (optional)</param>
        /// <param name="plcolumns">Playlist item columns to return (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> QueryAsyncWithHttpInfo (bool? player = null, List<string> trcolumns = null, bool? playlists = null, bool? playlistItems = null, string plref = null, string plrange = null, List<string> plcolumns = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class QueryApi : IQueryApi
    {
        private Foobar2000.RESTClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="QueryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public QueryApi(String basePath)
        {
            this.Configuration = new Foobar2000.RESTClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Foobar2000.RESTClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QueryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public QueryApi(Foobar2000.RESTClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Foobar2000.RESTClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Foobar2000.RESTClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Foobar2000.RESTClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Foobar2000.RESTClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player">Request player state (optional)</param>
        /// <param name="trcolumns">Active item columns to return (optional)</param>
        /// <param name="playlists">Request playlists (optional)</param>
        /// <param name="playlistItems">Request playlist items (optional)</param>
        /// <param name="plref">Playlist id or index to return items from (optional)</param>
        /// <param name="plrange">Playlist range to return items from (optional)</param>
        /// <param name="plcolumns">Playlist item columns to return (optional)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 Query (bool? player = null, List<string> trcolumns = null, bool? playlists = null, bool? playlistItems = null, string plref = null, string plrange = null, List<string> plcolumns = null)
        {
             ApiResponse<InlineResponse2003> localVarResponse = QueryWithHttpInfo(player, trcolumns, playlists, playlistItems, plref, plrange, plcolumns);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player">Request player state (optional)</param>
        /// <param name="trcolumns">Active item columns to return (optional)</param>
        /// <param name="playlists">Request playlists (optional)</param>
        /// <param name="playlistItems">Request playlist items (optional)</param>
        /// <param name="plref">Playlist id or index to return items from (optional)</param>
        /// <param name="plrange">Playlist range to return items from (optional)</param>
        /// <param name="plcolumns">Playlist item columns to return (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse< InlineResponse2003 > QueryWithHttpInfo (bool? player = null, List<string> trcolumns = null, bool? playlists = null, bool? playlistItems = null, string plref = null, string plrange = null, List<string> plcolumns = null)
        {

            var localVarPath = "/query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (player != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "player", player)); // query parameter
            if (trcolumns != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "trcolumns", trcolumns)); // query parameter
            if (playlists != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playlists", playlists)); // query parameter
            if (playlistItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playlistItems", playlistItems)); // query parameter
            if (plref != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "plref", plref)); // query parameter
            if (plrange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "plrange", plrange)); // query parameter
            if (plcolumns != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "plcolumns", plcolumns)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Query", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player">Request player state (optional)</param>
        /// <param name="trcolumns">Active item columns to return (optional)</param>
        /// <param name="playlists">Request playlists (optional)</param>
        /// <param name="playlistItems">Request playlist items (optional)</param>
        /// <param name="plref">Playlist id or index to return items from (optional)</param>
        /// <param name="plrange">Playlist range to return items from (optional)</param>
        /// <param name="plcolumns">Playlist item columns to return (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> QueryAsync (bool? player = null, List<string> trcolumns = null, bool? playlists = null, bool? playlistItems = null, string plref = null, string plrange = null, List<string> plcolumns = null)
        {
             ApiResponse<InlineResponse2003> localVarResponse = await QueryAsyncWithHttpInfo(player, trcolumns, playlists, playlistItems, plref, plrange, plcolumns);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player">Request player state (optional)</param>
        /// <param name="trcolumns">Active item columns to return (optional)</param>
        /// <param name="playlists">Request playlists (optional)</param>
        /// <param name="playlistItems">Request playlist items (optional)</param>
        /// <param name="plref">Playlist id or index to return items from (optional)</param>
        /// <param name="plrange">Playlist range to return items from (optional)</param>
        /// <param name="plcolumns">Playlist item columns to return (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> QueryAsyncWithHttpInfo (bool? player = null, List<string> trcolumns = null, bool? playlists = null, bool? playlistItems = null, string plref = null, string plrange = null, List<string> plcolumns = null)
        {

            var localVarPath = "/query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (player != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "player", player)); // query parameter
            if (trcolumns != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "trcolumns", trcolumns)); // query parameter
            if (playlists != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playlists", playlists)); // query parameter
            if (playlistItems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playlistItems", playlistItems)); // query parameter
            if (plref != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "plref", plref)); // query parameter
            if (plrange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "plrange", plrange)); // query parameter
            if (plcolumns != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "plcolumns", plcolumns)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Query", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

    }
}
