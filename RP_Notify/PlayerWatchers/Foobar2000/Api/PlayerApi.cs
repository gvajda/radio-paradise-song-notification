/* 
 * Player API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Foobar2000.RESTClient.Client;
using Foobar2000.RESTClient.Model;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace Foobar2000.RESTClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlayerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get player state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columns">Active item columns to return (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 GetPlayerState (List<string> columns = null);

        /// <summary>
        /// Get player state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columns">Active item columns to return (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> GetPlayerStateWithHttpInfo (List<string> columns = null);
        /// <summary>
        /// Pause player
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void Pause ();

        /// <summary>
        /// Pause player
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PauseWithHttpInfo ();
        /// <summary>
        /// Play current item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void PlayCurrent ();

        /// <summary>
        /// Play current item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PlayCurrentWithHttpInfo ();
        /// <summary>
        /// Play specific playlist item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="index">Item index</param>
        /// <returns></returns>
        void PlayItem (string playlistId, string index);

        /// <summary>
        /// Play specific playlist item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="index">Item index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PlayItemWithHttpInfo (string playlistId, string index);
        /// <summary>
        /// Play next item in currently played playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="by">Expression to select next item by (e.g. %artist%). (optional)</param>
        /// <returns></returns>
        void PlayNext (string by = null);

        /// <summary>
        /// Play next item in currently played playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="by">Expression to select next item by (e.g. %artist%). (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PlayNextWithHttpInfo (string by = null);
        /// <summary>
        /// Play previous item in currently played playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="by">Expression to select previous item by (e.g. %artist%). (optional)</param>
        /// <returns></returns>
        void PlayPrevious (string by = null);

        /// <summary>
        /// Play previous item in currently played playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="by">Expression to select previous item by (e.g. %artist%). (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PlayPreviousWithHttpInfo (string by = null);
        /// <summary>
        /// Play random item in currently played playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void PlayRandom ();

        /// <summary>
        /// Play random item in currently played playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PlayRandomWithHttpInfo ();
        /// <summary>
        /// Set player state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volume">New volume value (optional)</param>
        /// <param name="isMuted">New mute state (optional)</param>
        /// <param name="position">New absolute playback position (seconds) (optional)</param>
        /// <param name="relativePosition">New relative playback position (seconds) (optional)</param>
        /// <param name="playbackMode">New playback mode index (optional)</param>
        /// <returns></returns>
        void SetPlayerState (decimal? volume = null, bool? isMuted = null, decimal? position = null, decimal? relativePosition = null, decimal? playbackMode = null);

        /// <summary>
        /// Set player state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volume">New volume value (optional)</param>
        /// <param name="isMuted">New mute state (optional)</param>
        /// <param name="position">New absolute playback position (seconds) (optional)</param>
        /// <param name="relativePosition">New relative playback position (seconds) (optional)</param>
        /// <param name="playbackMode">New playback mode index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetPlayerStateWithHttpInfo (decimal? volume = null, bool? isMuted = null, decimal? position = null, decimal? relativePosition = null, decimal? playbackMode = null);
        /// <summary>
        /// Stop player
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void Stop ();

        /// <summary>
        /// Stop player
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StopWithHttpInfo ();
        /// <summary>
        /// Toggle pause state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void TogglePause ();

        /// <summary>
        /// Toggle pause state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TogglePauseWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get player state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columns">Active item columns to return (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> GetPlayerStateAsync (List<string> columns = null);

        /// <summary>
        /// Get player state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columns">Active item columns to return (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetPlayerStateAsyncWithHttpInfo (List<string> columns = null);
        /// <summary>
        /// Pause player
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PauseAsync ();

        /// <summary>
        /// Pause player
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PauseAsyncWithHttpInfo ();
        /// <summary>
        /// Play current item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PlayCurrentAsync ();

        /// <summary>
        /// Play current item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PlayCurrentAsyncWithHttpInfo ();
        /// <summary>
        /// Play specific playlist item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="index">Item index</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PlayItemAsync (string playlistId, string index);

        /// <summary>
        /// Play specific playlist item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="index">Item index</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PlayItemAsyncWithHttpInfo (string playlistId, string index);
        /// <summary>
        /// Play next item in currently played playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="by">Expression to select next item by (e.g. %artist%). (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PlayNextAsync (string by = null);

        /// <summary>
        /// Play next item in currently played playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="by">Expression to select next item by (e.g. %artist%). (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PlayNextAsyncWithHttpInfo (string by = null);
        /// <summary>
        /// Play previous item in currently played playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="by">Expression to select previous item by (e.g. %artist%). (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PlayPreviousAsync (string by = null);

        /// <summary>
        /// Play previous item in currently played playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="by">Expression to select previous item by (e.g. %artist%). (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PlayPreviousAsyncWithHttpInfo (string by = null);
        /// <summary>
        /// Play random item in currently played playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PlayRandomAsync ();

        /// <summary>
        /// Play random item in currently played playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PlayRandomAsyncWithHttpInfo ();
        /// <summary>
        /// Set player state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volume">New volume value (optional)</param>
        /// <param name="isMuted">New mute state (optional)</param>
        /// <param name="position">New absolute playback position (seconds) (optional)</param>
        /// <param name="relativePosition">New relative playback position (seconds) (optional)</param>
        /// <param name="playbackMode">New playback mode index (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetPlayerStateAsync (decimal? volume = null, bool? isMuted = null, decimal? position = null, decimal? relativePosition = null, decimal? playbackMode = null);

        /// <summary>
        /// Set player state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volume">New volume value (optional)</param>
        /// <param name="isMuted">New mute state (optional)</param>
        /// <param name="position">New absolute playback position (seconds) (optional)</param>
        /// <param name="relativePosition">New relative playback position (seconds) (optional)</param>
        /// <param name="playbackMode">New playback mode index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetPlayerStateAsyncWithHttpInfo (decimal? volume = null, bool? isMuted = null, decimal? position = null, decimal? relativePosition = null, decimal? playbackMode = null);
        /// <summary>
        /// Stop player
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StopAsync ();

        /// <summary>
        /// Stop player
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StopAsyncWithHttpInfo ();
        /// <summary>
        /// Toggle pause state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TogglePauseAsync ();

        /// <summary>
        /// Toggle pause state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TogglePauseAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PlayerApi : IPlayerApi
    {
        private Foobar2000.RESTClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlayerApi(String basePath)
        {
            this.Configuration = new Foobar2000.RESTClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Foobar2000.RESTClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PlayerApi(Foobar2000.RESTClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Foobar2000.RESTClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Foobar2000.RESTClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Foobar2000.RESTClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Foobar2000.RESTClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get player state 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columns">Active item columns to return (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 GetPlayerState (List<string> columns = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = GetPlayerStateWithHttpInfo(columns);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get player state 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columns">Active item columns to return (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > GetPlayerStateWithHttpInfo (List<string> columns = null)
        {

            var localVarPath = "/player";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (columns != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "columns", columns)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlayerState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Get player state 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columns">Active item columns to return (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> GetPlayerStateAsync (List<string> columns = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = await GetPlayerStateAsyncWithHttpInfo(columns);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get player state 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columns">Active item columns to return (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetPlayerStateAsyncWithHttpInfo (List<string> columns = null)
        {

            var localVarPath = "/player";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (columns != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "columns", columns)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlayerState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Pause player 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void Pause ()
        {
             PauseWithHttpInfo();
        }

        /// <summary>
        /// Pause player 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PauseWithHttpInfo ()
        {

            var localVarPath = "/player/pause";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Pause", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Pause player 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PauseAsync ()
        {
             await PauseAsyncWithHttpInfo();

        }

        /// <summary>
        /// Pause player 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PauseAsyncWithHttpInfo ()
        {

            var localVarPath = "/player/pause";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Pause", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Play current item 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void PlayCurrent ()
        {
             PlayCurrentWithHttpInfo();
        }

        /// <summary>
        /// Play current item 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PlayCurrentWithHttpInfo ()
        {

            var localVarPath = "/player/play";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlayCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Play current item 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PlayCurrentAsync ()
        {
             await PlayCurrentAsyncWithHttpInfo();

        }

        /// <summary>
        /// Play current item 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PlayCurrentAsyncWithHttpInfo ()
        {

            var localVarPath = "/player/play";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlayCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Play specific playlist item 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="index">Item index</param>
        /// <returns></returns>
        public void PlayItem (string playlistId, string index)
        {
             PlayItemWithHttpInfo(playlistId, index);
        }

        /// <summary>
        /// Play specific playlist item 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="index">Item index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PlayItemWithHttpInfo (string playlistId, string index)
        {
            // verify the required parameter 'playlistId' is set
            if (playlistId == null)
                throw new ApiException(400, "Missing required parameter 'playlistId' when calling PlayerApi->PlayItem");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling PlayerApi->PlayItem");

            var localVarPath = "/player/play/{playlistId}/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playlistId != null) localVarPathParams.Add("playlistId", this.Configuration.ApiClient.ParameterToString(playlistId)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlayItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Play specific playlist item 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="index">Item index</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PlayItemAsync (string playlistId, string index)
        {
             await PlayItemAsyncWithHttpInfo(playlistId, index);

        }

        /// <summary>
        /// Play specific playlist item 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Playlist id or index</param>
        /// <param name="index">Item index</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PlayItemAsyncWithHttpInfo (string playlistId, string index)
        {
            // verify the required parameter 'playlistId' is set
            if (playlistId == null)
                throw new ApiException(400, "Missing required parameter 'playlistId' when calling PlayerApi->PlayItem");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling PlayerApi->PlayItem");

            var localVarPath = "/player/play/{playlistId}/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playlistId != null) localVarPathParams.Add("playlistId", this.Configuration.ApiClient.ParameterToString(playlistId)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlayItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Play next item in currently played playlist 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="by">Expression to select next item by (e.g. %artist%). (optional)</param>
        /// <returns></returns>
        public void PlayNext (string by = null)
        {
             PlayNextWithHttpInfo(by);
        }

        /// <summary>
        /// Play next item in currently played playlist 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="by">Expression to select next item by (e.g. %artist%). (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PlayNextWithHttpInfo (string by = null)
        {

            var localVarPath = "/player/next";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (by != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "by", by)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlayNext", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Play next item in currently played playlist 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="by">Expression to select next item by (e.g. %artist%). (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PlayNextAsync (string by = null)
        {
             await PlayNextAsyncWithHttpInfo(by);

        }

        /// <summary>
        /// Play next item in currently played playlist 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="by">Expression to select next item by (e.g. %artist%). (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PlayNextAsyncWithHttpInfo (string by = null)
        {

            var localVarPath = "/player/next";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (by != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "by", by)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlayNext", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Play previous item in currently played playlist 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="by">Expression to select previous item by (e.g. %artist%). (optional)</param>
        /// <returns></returns>
        public void PlayPrevious (string by = null)
        {
             PlayPreviousWithHttpInfo(by);
        }

        /// <summary>
        /// Play previous item in currently played playlist 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="by">Expression to select previous item by (e.g. %artist%). (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PlayPreviousWithHttpInfo (string by = null)
        {

            var localVarPath = "/player/previous";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (by != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "by", by)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlayPrevious", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Play previous item in currently played playlist 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="by">Expression to select previous item by (e.g. %artist%). (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PlayPreviousAsync (string by = null)
        {
             await PlayPreviousAsyncWithHttpInfo(by);

        }

        /// <summary>
        /// Play previous item in currently played playlist 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="by">Expression to select previous item by (e.g. %artist%). (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PlayPreviousAsyncWithHttpInfo (string by = null)
        {

            var localVarPath = "/player/previous";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (by != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "by", by)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlayPrevious", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Play random item in currently played playlist 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void PlayRandom ()
        {
             PlayRandomWithHttpInfo();
        }

        /// <summary>
        /// Play random item in currently played playlist 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PlayRandomWithHttpInfo ()
        {

            var localVarPath = "/player/play/random";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlayRandom", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Play random item in currently played playlist 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PlayRandomAsync ()
        {
             await PlayRandomAsyncWithHttpInfo();

        }

        /// <summary>
        /// Play random item in currently played playlist 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PlayRandomAsyncWithHttpInfo ()
        {

            var localVarPath = "/player/play/random";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlayRandom", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set player state 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volume">New volume value (optional)</param>
        /// <param name="isMuted">New mute state (optional)</param>
        /// <param name="position">New absolute playback position (seconds) (optional)</param>
        /// <param name="relativePosition">New relative playback position (seconds) (optional)</param>
        /// <param name="playbackMode">New playback mode index (optional)</param>
        /// <returns></returns>
        public void SetPlayerState (decimal? volume = null, bool? isMuted = null, decimal? position = null, decimal? relativePosition = null, decimal? playbackMode = null)
        {
             SetPlayerStateWithHttpInfo(volume, isMuted, position, relativePosition, playbackMode);
        }

        /// <summary>
        /// Set player state 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volume">New volume value (optional)</param>
        /// <param name="isMuted">New mute state (optional)</param>
        /// <param name="position">New absolute playback position (seconds) (optional)</param>
        /// <param name="relativePosition">New relative playback position (seconds) (optional)</param>
        /// <param name="playbackMode">New playback mode index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetPlayerStateWithHttpInfo (decimal? volume = null, bool? isMuted = null, decimal? position = null, decimal? relativePosition = null, decimal? playbackMode = null)
        {

            var localVarPath = "/player";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (volume != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "volume", volume)); // query parameter
            if (isMuted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isMuted", isMuted)); // query parameter
            if (position != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "position", position)); // query parameter
            if (relativePosition != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "relativePosition", relativePosition)); // query parameter
            if (playbackMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playbackMode", playbackMode)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetPlayerState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set player state 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volume">New volume value (optional)</param>
        /// <param name="isMuted">New mute state (optional)</param>
        /// <param name="position">New absolute playback position (seconds) (optional)</param>
        /// <param name="relativePosition">New relative playback position (seconds) (optional)</param>
        /// <param name="playbackMode">New playback mode index (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetPlayerStateAsync (decimal? volume = null, bool? isMuted = null, decimal? position = null, decimal? relativePosition = null, decimal? playbackMode = null)
        {
             await SetPlayerStateAsyncWithHttpInfo(volume, isMuted, position, relativePosition, playbackMode);

        }

        /// <summary>
        /// Set player state 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volume">New volume value (optional)</param>
        /// <param name="isMuted">New mute state (optional)</param>
        /// <param name="position">New absolute playback position (seconds) (optional)</param>
        /// <param name="relativePosition">New relative playback position (seconds) (optional)</param>
        /// <param name="playbackMode">New playback mode index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetPlayerStateAsyncWithHttpInfo (decimal? volume = null, bool? isMuted = null, decimal? position = null, decimal? relativePosition = null, decimal? playbackMode = null)
        {

            var localVarPath = "/player";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (volume != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "volume", volume)); // query parameter
            if (isMuted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isMuted", isMuted)); // query parameter
            if (position != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "position", position)); // query parameter
            if (relativePosition != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "relativePosition", relativePosition)); // query parameter
            if (playbackMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playbackMode", playbackMode)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetPlayerState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Stop player 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void Stop ()
        {
             StopWithHttpInfo();
        }

        /// <summary>
        /// Stop player 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StopWithHttpInfo ()
        {

            var localVarPath = "/player/stop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Stop", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Stop player 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StopAsync ()
        {
             await StopAsyncWithHttpInfo();

        }

        /// <summary>
        /// Stop player 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StopAsyncWithHttpInfo ()
        {

            var localVarPath = "/player/stop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Stop", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Toggle pause state 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void TogglePause ()
        {
             TogglePauseWithHttpInfo();
        }

        /// <summary>
        /// Toggle pause state 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TogglePauseWithHttpInfo ()
        {

            var localVarPath = "/player/pause/toggle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TogglePause", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Toggle pause state 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TogglePauseAsync ()
        {
             await TogglePauseAsyncWithHttpInfo();

        }

        /// <summary>
        /// Toggle pause state 
        /// </summary>
        /// <exception cref="Foobar2000.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TogglePauseAsyncWithHttpInfo ()
        {

            var localVarPath = "/player/pause/toggle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TogglePause", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
